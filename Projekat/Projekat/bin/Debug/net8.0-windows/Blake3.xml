<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blake3</name>
    </assembly>
    <members>
        <member name="T:Blake3.Blake3HashAlgorithm">
            <summary>
            Implementation of <see cref="T:System.Security.Cryptography.HashAlgorithm"/> for BLAKE3.
            </summary>
        </member>
        <member name="T:Blake3.Blake3Stream">
             <summary>
             A stream that allows to calculate a hash while reading/writing from a backend stream.
            
             Use the <see cref="M:Blake3.Blake3Stream.ComputeHash"/> or <see cref="M:Blake3.Blake3Stream.ComputeHash(System.Span{System.Byte})"/> methods to calculate the hash before disposing the stream
             </summary>
        </member>
        <member name="M:Blake3.Blake3Stream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:Blake3.Blake3Stream"/> using the specified backend stream.
            </summary>
            <param name="backendStream"></param>
            <param name="dispose">A boolean that indicates if this stream will dispose the backend stream. Default is true.</param>
        </member>
        <member name="T:Blake3.Hash">
            <summary>
            An output of the default size, 32 bytes, which provides constant-time equality checking.
            </summary>
            <remarks>
            This hash is returned by <see cref="M:Blake3.Hasher.Hash(System.ReadOnlySpan{System.Byte})"/>.
            This hash struct provides structural equality.
            </remarks>
        </member>
        <member name="F:Blake3.Hash.Size">
            <summary>
            The size of this hash is 32 bytes.
            </summary>
        </member>
        <member name="M:Blake3.Hash.CopyFromBytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Copies bytes to this hash. The input data must be 32 bytes.
            </summary>
            <param name="data">A 32-byte buffer.</param>
        </member>
        <member name="M:Blake3.Hash.FromBytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Creates a hash from an input data that must be 32 bytes.
            </summary>
            <param name="data">A 32-byte buffer.</param>
            <returns>The 32-byte hash.</returns>
        </member>
        <member name="M:Blake3.Hash.AsSpan">
            <summary>
            Creates a span from a hash. The span returned has to follow the same lifetime than the hash referenced.
            </summary>
            <returns>The hash of the span</returns>
        </member>
        <member name="T:Blake3.Hasher">
            <summary>
            An incremental hash state that can accept any number of writes.
            </summary>
            <remarks>
            Performance note: The <see cref="M:Blake3.Hasher.Update``1(System.ReadOnlySpan{``0})"/> and <see cref="M:Blake3.Hasher.UpdateWithJoin``1(System.ReadOnlySpan{``0})"/> methods perform poorly when the caller's input buffer is small.
            See their method docs below. A 16 KiB buffer is large enough to leverage all currently supported SIMD instruction sets.
            </remarks>
        </member>
        <member name="F:Blake3.Hasher.LimitPreemptive">
            <summary>
            We are taking a limit of 1024 bytes to switch to a preemptive version,
            as it takes around 1Î¼s on a x64 very recent CPU to complete, which is
            better aligned with the documentation of <see cref="T:System.Runtime.InteropServices.SuppressGCTransitionAttribute"/>:
            `Native function always executes for a trivial amount of time (less than 1 microsecond).`
            </summary>
        </member>
        <member name="M:Blake3.Hasher.#ctor">
            <summary>
            Invalid constructor.
            </summary>
        </member>
        <member name="M:Blake3.Hasher.Hash(System.ReadOnlySpan{System.Byte})">
            <summary>
            The default hash function.
            </summary>
            <param name="input">The input data to hash.</param>
            <returns>The calculated 256-bit/32-byte hash.</returns>
            <remarks>
            For an incremental version that accepts multiple writes <see cref="M:Blake3.Hasher.Update``1(System.ReadOnlySpan{``0})"/>
            This function is always single-threaded. For multi-threading support <see cref="M:Blake3.Hasher.UpdateWithJoin(System.ReadOnlySpan{System.Byte})"/> 
            </remarks>
        </member>
        <member name="M:Blake3.Hasher.Hash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            The default hash function.
            </summary>
            <param name="input">The input data to hash.</param>
            <param name="output">The output hash.</param>
            <remarks>
            For an incremental version that accepts multiple writes <see cref="M:Blake3.Hasher.Update``1(System.ReadOnlySpan{``0})"/>
            This function is always single-threaded. For multi-threading support <see cref="M:Blake3.Hasher.UpdateWithJoin(System.ReadOnlySpan{System.Byte})"/> 
            </remarks>
        </member>
        <member name="M:Blake3.Hasher.Dispose">
            <summary>
            Dispose this instance.
            </summary>
        </member>
        <member name="M:Blake3.Hasher.Reset">
            <summary>
            Reset the Hasher to its initial state.
            </summary>
            <remarks>
            This is functionally the same as overwriting the Hasher with a new one, using the same key or context string if any.
            However, depending on how much inlining the optimizer does, moving a Hasher might copy its entire CV stack, most of which is useless uninitialized bytes.
            This methods avoids that copy.
            </remarks>
        </member>
        <member name="M:Blake3.Hasher.Update(System.ReadOnlySpan{System.Byte})">
             <summary>
             Add input bytes to the hash state. You can call this any number of times.
             </summary>
             <param name="data">The input data byte buffer to hash.</param>
             <remarks>
             This method is always single-threaded. For multi-threading support, see <see cref="M:Blake3.Hasher.UpdateWithJoin(System.ReadOnlySpan{System.Byte})"/> below.
            
             Note that the degree of SIMD parallelism that update can use is limited by the size of this input buffer.
             The 8 KiB buffer currently used by std::io::copy is enough to leverage AVX2, for example, but not enough to leverage AVX-512.
             A 16 KiB buffer is large enough to leverage all currently supported SIMD instruction sets.
             </remarks>
        </member>
        <member name="M:Blake3.Hasher.Update``1(System.ReadOnlySpan{``0})">
             <summary>
             Add input data to the hash state. You can call this any number of times.
             </summary>
             <typeparam name="T">Type of the data</typeparam>
             <param name="data">The data span to hash.</param>
             <remarks>
             This method is always single-threaded. For multi-threading support, see <see cref="M:Blake3.Hasher.UpdateWithJoin(System.ReadOnlySpan{System.Byte})"/> below.
            
             Note that the degree of SIMD parallelism that update can use is limited by the size of this input buffer.
             The 8 KiB buffer currently used by std::io::copy is enough to leverage AVX2, for example, but not enough to leverage AVX-512.
             A 16 KiB buffer is large enough to leverage all currently supported SIMD instruction sets.
             </remarks>
        </member>
        <member name="M:Blake3.Hasher.UpdateWithJoin(System.ReadOnlySpan{System.Byte})">
            <summary>
            Add input bytes to the hash state, as with update, but potentially using multi-threading.
            </summary>
            <param name="data">The input byte buffer.</param>
            <remarks>
            To get any performance benefit from multi-threading, the input buffer size needs to be very large.
            As a rule of thumb on x86_64, there is no benefit to multi-threading inputs less than 128 KiB.
            Other platforms have different thresholds, and in general you need to benchmark your specific use case.
            Where possible, memory mapping an entire input file is recommended, to take maximum advantage of multi-threading without needing to tune a specific buffer size.
            Where memory mapping is not possible, good multi-threading performance requires doing IO on a background thread, to avoid sleeping all your worker threads while the input buffer is (serially) refilled.
            This is quite complicated compared to memory mapping.
            </remarks>
        </member>
        <member name="M:Blake3.Hasher.UpdateWithJoin``1(System.ReadOnlySpan{``0})">
            <summary>
            Add input data span to the hash state, as with update, but potentially using multi-threading.
            </summary>
            <param name="data">The input data buffer.</param>
            <remarks>
            To get any performance benefit from multi-threading, the input buffer size needs to be very large.
            As a rule of thumb on x86_64, there is no benefit to multi-threading inputs less than 128 KiB.
            Other platforms have different thresholds, and in general you need to benchmark your specific use case.
            Where possible, memory mapping an entire input file is recommended, to take maximum advantage of multi-threading without needing to tune a specific buffer size.
            Where memory mapping is not possible, good multi-threading performance requires doing IO on a background thread, to avoid sleeping all your worker threads while the input buffer is (serially) refilled.
            This is quite complicated compared to memory mapping.
            </remarks>
        </member>
        <member name="M:Blake3.Hasher.Finalize">
            <summary>
            Finalize the hash state and return the Hash of the input.
            </summary>
            <returns>The calculated 256-bit/32-byte hash.</returns>
            <remarks>
            This method is idempotent. Calling it twice will give the same result. You can also add more input and finalize again.
            </remarks>
        </member>
        <member name="M:Blake3.Hasher.Finalize(System.Span{System.Byte})">
            <summary>
            Finalize the hash state to the output span, which can supply any number of output bytes.
            </summary>
            <param name="hash">The output hash, which can supply any number of output bytes.</param>
            <remarks>
            This method is idempotent. Calling it twice will give the same result. You can also add more input and finalize again.
            </remarks>
        </member>
        <member name="M:Blake3.Hasher.Finalize(System.UInt64,System.Span{System.Byte})">
            <summary>
            Finalize the hash state to the output span, which can supply any number of output bytes.
            </summary>
            <param name="offset">The offset to seek to in the output stream, relative to the start.</param>
            <param name="hash">The output hash, which can supply any number of output bytes.</param>
            <remarks>
            This method is idempotent. Calling it twice will give the same result. You can also add more input and finalize again.
            </remarks>
        </member>
        <member name="M:Blake3.Hasher.Finalize(System.Int64,System.Span{System.Byte})">
            <summary>
            Finalize the hash state to the output span, which can supply any number of output bytes.
            </summary>
            <param name="offset">The offset to seek to in the output stream, relative to the start.</param>
            <param name="hash">The output hash, which can supply any number of output bytes.</param>
            <remarks>
            This method is idempotent. Calling it twice will give the same result. You can also add more input and finalize again.
            </remarks>
        </member>
        <member name="M:Blake3.Hasher.New">
            <summary>
            Construct a new Hasher for the regular hash function.
            </summary>
            <returns>A new instance of the hasher</returns>
            <remarks>
            The struct returned needs to be disposed explicitly.
            </remarks>
        </member>
        <member name="M:Blake3.Hasher.NewKeyed(System.ReadOnlySpan{System.Byte})">
            <summary>
            Construct a new Hasher for the keyed hash function.
            </summary>
            <param name="key">A 32 byte key.</param>
            <returns>A new instance of the hasher</returns>
            <remarks>
            The struct returned needs to be disposed explicitly.
            </remarks>
        </member>
        <member name="M:Blake3.Hasher.NewDeriveKey(System.String)">
            <summary>
            Construct a new Hasher for the key derivation function.
            </summary>
            <returns>A new instance of the hasher</returns>
            <remarks>
            The struct returned needs to be disposed explicitly.
            </remarks>
        </member>
        <member name="M:Blake3.Hasher.NewDeriveKey(System.ReadOnlySpan{System.Byte})">
            <summary>
            Construct a new Hasher for the key derivation function.
            </summary>
            <returns>A new instance of the hasher</returns>
            <remarks>
            The struct returned needs to be disposed explicitly.
            </remarks>
        </member>
    </members>
</doc>
